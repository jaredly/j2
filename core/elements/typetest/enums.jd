@type:shouldMatch(:[ `Hi ]) [ `Hi ]

@type:shouldNotMatch(:[ `One ])
@type:shouldMatch(:[ `One | `Two ]) [ `Two ]

@type:shouldMatch(:[ `One | `Two ])
@type:shouldNotMatch(:[ `One ]) [ `One | `Two ]

@type:shouldNotMatch(:[ `Hi(int) ]) [ `Hi(float) ]

@type:shouldMatch(:[ `Hi(int) ]) (<T#[0]>[ `Hi(T#[0]) ])<int>

@type:shouldNotMatch(:[ `One | `Two ]) [ `Two | * ]

@type:shouldMatch(:[ `One | * ])
@type:shouldMatch(:[ * ]) [ `One | `Two ]

@type:shouldMatch(:[ `Hi(int) ]) [ `Hi(10) ]

@type:shouldMatch(:[ `Hi(int) ]) [ `Hi(10) | @error:conflictingEnumTag() `Hi(int) ]

type One = [ `A | `B ]

@type:shouldMatch(:unnamed#[hfb353110432771bdb690ef67d47cf80f61032eb9]) [ `A ]

@type:shouldMatch(:unnamed#[hfb353110432771bdb690ef67d47cf80f61032eb9]) [ `A | unnamed#[hfb353110432771bdb690ef67d47cf80f61032eb9] ]

type Tree = [ unnamed#[r1] | `Leaf ]
and Node = [ `Tree(unnamed#[r0]) ]

@type:shouldMatch(:unnamed#[hb41c04d40f94a999d5d4cb50d21d5aa9ea8d1f41]) [ `Leaf ]

type X = unnamed#[r1]
and Y = unnamed#[r0]

@type:shouldNotMatch(:@error:invalidType() unnamed#[h2495d8c329fa7e611015ad434c8fa4293a4d7681]) 1

type A = [ `A | unnamed#[r1] ]
and B = [ `B | unnamed#[r0] ]

@type:shouldNotMatch(:unnamed#[hf00e851aab10952af4676246e65dc2c8c00cdcdd]) [ `A ]

type N = [ `A(int, float) ]

@type:shouldMatch(:{x: [ `A | `B ]}) {x: [ `A ]}

@type:shouldMatch(:[ `Failure([ `TooBad | `Timeout | `SomethingElse ]) ]) [ `Failure([ `TooBad ]) | @error:conflictingEnumTag() `Failure(
    [ `Timeout ],
) ]

@type:shouldMatch(:[ `Failure([ `TooBad | `Timeout | `C ], int) ]) [ `Failure([ `TooBad ], int) | @error:conflictingEnumTag() `Failure(
    [ `Timeout ],
    int,
) ]
