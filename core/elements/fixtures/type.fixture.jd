##[builtins]##
//:value:hello:(v: "hello") => int
//:value:ten:(v: 10) => int
//:value:id:<T>(x: T) => T
//:value:wantsId:(v: <T>(x: T) => T) => int
//:type:Array:<Element>

##[fixtures]##
==[basic]==
--[input]--
@test:type(: bool) 10

--[output:expected]--
alias bool#[h62d1b70cb3ae567d8df7d48fe634fd37fd0f5150] test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:bool) 10
// 10
/* 10 */

==[constants]==
--[input]--
@test:type(: "hello", : 10) "target"

--[output:expected]--
alias test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:"hello", :10) "target"
// "target"
/* `target` */

==[lambdas]==
--[input]--
@test:type(: () => 10, :(v: int, float) => int) "ok"

--[output:expected]--
alias float#[h1c9cc9450fe2e869a48abaa5e4a85271e1625474] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:() => 10, :(v: int, float) => int) "ok"
// "ok"
/* `ok` */

==[tvars]==
--[input]--
@test:type(: <T>(v: T) => T) 10

--[output:expected]--
alias test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:<T#[0]>(v: T#[0]) => T#[0]) 10
// 10
/* 10 */

==[unresovled]==
--[input:shouldFail]--
@test:type(: hello) 10

--[output:expected]--
alias test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:hello#[:unresolved:]) 10

==[arg default]==
--[input]--
@test:type(: <T: string, A: int = 10>(a: T, b: A) => A) 100

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4] test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:<T#[0]: string, A#[1]: int = 10>(a: T#[0], b: A#[1]) => A#[1]) 100
// 100
/* 100 */

==[basic type alias]==
--[input]--
type hello = int
@test:type(: hello) 10

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type hello = int
alias hello#[h7f7e38916d42ca00c3af4f0b1a80166a75aea9f5] test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:hello) 10
// 10
/* 10 */

==[bound]==
--[input:shouldFail]--
type StringMe = <T: string>int;
@test:type(:StringMe<20>) 10
@test:type(:StringMe<"hello">) 10

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
type StringMe = <T#[0]: string>int
alias StringMe#[h25c8fc60eccd050e45c5c2f4696e1bd578ae98fa] error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f] test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:StringMe<@error:argWrongType(expected: :string) 20>) 10
@test:type(:StringMe<"hello">) 10
// 10
/* 10 */

==[decorate the type]==
--[input]--
@test:type(: @test:type() string) 10

--[output:expected]--
alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4] test:type#[he071eaec952a7917f20d1828e42268ca3a10c513]
@test:type(:@test:type() string) 10
// 10
/* 10 */

==[literals]==
--[input:shouldFail]--
hello("hello")
hello("ho")
ten(10)
ten(5)

--[output:expected]--
alias hello#[h4be83b97ef46480eb6f8573f2ab90ed7c5c8b1e5]
hello("hello")
// int
/* hello(`hello`) */
alias error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f]
hello(@error:argWrongType(expected: :"hello") "ho")
alias ten#[hf4f51e4cf24724da57c43defaba9896829117c9f]
ten(10)
// int
/* ten(10) */
ten(@error:argWrongType(expected: :10) 5)

==[rank 2 my folks]==
--[input]--
wantsId(id)

--[output:expected]--
alias id#[h1be1f842795aa8938e3a35912c925528cda5e190] wantsId#[h1367c8b71fd586945c9bdbd7bd79c6a7871d4b1c]
wantsId(id)
// int
/* wantsId(id) */

==[string top]==
--[input]--
type x = "one" + string
type Z = (<S: string>int)<x>

--[output:expected]--
alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
type x = "one" + string
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] x#[h1e9c080b8ba44508b1e38f3743a8e4a7b8c813a0]
type Z = (<S#[0]: string>int)<x>

==[string ops]==
--[input:shouldFail]--
type FancyArray = <Element: "one" + string + "suffix">Array<Element>
type Good = FancyArray<"ones and a suffix">
type Bad = FancyArray<"something else">

--[output:expected]--
alias Array#[h0185a04019af57b0d231bb9bd02d5f7581c9485c] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
type FancyArray = <Element#[0]: "one" + string + "suffix">Array<Element#[0]>
alias FancyArray#[h97889a9d4f737b3400dbf19dcda58a6756878281]
type Good = FancyArray<"ones and a suffix">
alias error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f]
type Bad = FancyArray<@error:argWrongType(expected: :"one" + string + "suffix") "something else">

==[string ops_]==
--[input:shouldFail]--
type NumArray = <Element: 10 + uint>Array<Element>
type Good = NumArray<20>
type Bad = NumArray<5>

--[output:expected]--
alias Array#[h0185a04019af57b0d231bb9bd02d5f7581c9485c] uint#[h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83]
type NumArray = <Element#[0]: 10 + uint>Array<Element#[0]>
alias NumArray#[h44ce62618720fd69764600d44f2692fab8e2d0d3] error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f]
type Good = NumArray<@error:argWrongType(expected: :10 + uint) 20>
type Bad = NumArray<@error:argWrongType(expected: :10 + uint) 5>

==[type arithmetic]==
--[input]--
type X = (<X: 10 + int>int)<13>
type X = (<X: 5 + 5>int)<10>
type X = (<X: string + ".js">int)<"hello.js">
type X = (<X: string + ".js">int)<"hi" + ".js">

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type X = (<X#[0]: 10 + int>int)<13>
type X = (<X#[0]: 5 + 5>int)<10>
alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
type X = (<X#[0]: string + ".js">int)<"hello.js">
type X = (<X#[0]: string + ".js">int)<"hi" + ".js">

==[type arithmetic fail]==
--[input:shouldFail]--
type X = (<X: 10 + int>int)<5>
type X = (<X: 10 + int>int)<int>
type X = (<X: string + ".js">int)<string>

--[output:expected]--
alias error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type X = (<X#[0]: 10 + int>int)<@error:argWrongType(expected: :10 + int) 5>
type X = (<X#[0]: 10 + int>int)<@error:argWrongType(expected: :10 + int) int>
alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
type X = (<X#[0]: string + ".js">int)<@error:argWrongType(expected: :string + ".js") string>

==[New fixture]==
--[input:shouldFail]--
type X = "hi" + 3

--[output:expected]--
alias error:invalidOps#[h5b2cd4121f17aafc0e0add71bffc73cdaed46019]
type X = @error:invalidOps() ("hi" + 3)