##[builtins]##
//:value:simple:() => string
//:value:oneArg:(v: int) => string
//:value:takeIntArg:(fn: (v: int) => string) => string
//:value:take10Arg:(fn: (v: 10) => string) => string
//:value:intArg:(v: int) => string
//:value:tenArg:(v: 10) => string
//:value:takeIntArgTaker:(fn: (fn: (v: int) => string) => string) => string
//:value:take10ArgTaker:(fn: (fn: (v: 10) => string) => string) => string

##[fixtures]##
==[well-typed builtin call]==
--[input]--
toString(1)
toString(3.4)

--[output:expected]--
alias string=hd978df838905e7e1bd7bb33530ae12436e3756f4 toString=h99b01457a189d1392ca641b22a79c97b3eda324c toString_h7=h7a085b7af0cace37678c385e00d352db9204d70a
toString(1)
// string
/* toString(1) */
toString_h7(3.4)
// string
/* toString(3.4) */

==[multiple args]==
--[input]--
twoArgs(1, "hello")

--[output:expected]--
alias string=hd978df838905e7e1bd7bb33530ae12436e3756f4 twoArgs=h0f02217a611769b7c4ee218488bbd1fc16cbeeb5
twoArgs(1, "hello")
// string
/* twoArgs(1, `hello`) */

--[builtins]--
//:value:twoArgs:(one: int, two: string) => string

==[pass lambda]==
--[input]--
takeSimple(simple)

--[output:expected]--
alias simple=h65dbf0bf0a81f130770718771f42643e5fb6ac13 string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takeSimple=hdc45749f4e265c12ceb62ea6db4d02a0386622c5
takeSimple(simple)
// string
/* takeSimple(simple) */

--[builtins]--
//:value:takeSimple:(simple: () => string) => string

==[pass wrong lambda]==
--[input:shouldFail]--
takeOneArg(simple)
takeOneArg(oneArg)
takeIntle(simple)

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f oneArg=h6c7b76e2a1fd1d300d0aa0993809744ac47efe81 simple=h65dbf0bf0a81f130770718771f42643e5fb6ac13 string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takeIntle=h99f1d88655e3e7bf225c2511cd77a0fa1b520d59 takeOneArg=h49c17c8d3d1c8610fb4d0b14b9cd3caa7248cfdd
takeOneArg(@error:argWrongType(expected: :(v: int) => string) simple)
// string
takeOneArg(oneArg)
// string
/* takeOneArg(oneArg) */
takeIntle(@error:argWrongType(expected: :() => int) simple)
// string

--[builtins]--
//:value:takeIntle:(simple: () => int) => string
//:value:takeOneArg:(simple: (v: int) => string) => string

==[arg type error]==
--[input:shouldFail]--
oneArg(true)

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f oneArg=h6c7b76e2a1fd1d300d0aa0993809744ac47efe81 string=hd978df838905e7e1bd7bb33530ae12436e3756f4
oneArg(@error:argWrongType(expected: :int) true)
// string

==[wrong number of args]==
--[input:shouldFail]--
oneArg(1, 2)

--[output:expected]--
alias error:wrongNumberOfArgs=he554807c644be72e6c4e5cb59aa0955f9ab67f13 oneArg=h6c7b76e2a1fd1d300d0aa0993809744ac47efe81 string=hd978df838905e7e1bd7bb33530ae12436e3756f4
@error:wrongNumberOfArgs() oneArg(1, 2)
// string

==[not a fn]==
--[input:shouldFail]--
(10)(20)

--[output:expected]--
alias error:notAFunction=h16ba48b37c7d5999c12c172bd1bbdeac9773c21a
@error:notAFunction() 10(20)
// Error, no type!

==[calling undefined function]==
--[input:shouldFail]--
undefinedFunction()

--[output:expected]--
undefinedFunction#[:unresolved:]()
// Error, no type!

==[double apply]==
--[input:shouldFail]--
oneArg(1)()

--[output:expected]--
alias error:notAFunction=h16ba48b37c7d5999c12c172bd1bbdeac9773c21a oneArg=h6c7b76e2a1fd1d300d0aa0993809744ac47efe81
@error:notAFunction() oneArg(1)()
// Error, no type!

==[variance]==
--[input]--
takeIntArg(intArg)
take10Arg(tenArg)

--[output:expected]--
alias intArg=h67789f568964fa53a2df27ab843b718d0f9252f0 string=hd978df838905e7e1bd7bb33530ae12436e3756f4 take10Arg=h35f7ae1b4d73863baeacd76e318976ba557137da takeIntArg=hbbad4dcddf49fa76dadb8708898a93677da48de3 tenArg=h28bcd0de96d1861d032f20f5229c3988e2b468dc
takeIntArg(intArg)
// string
/* takeIntArg(intArg) */
take10Arg(tenArg)
// string
/* take10Arg(tenArg) */

==[variance 2]==
--[input:shouldFail]--
// At the first level we reverse variance
takeIntArg(tenArg)

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takeIntArg=hbbad4dcddf49fa76dadb8708898a93677da48de3 tenArg=h28bcd0de96d1861d032f20f5229c3988e2b468dc
// At the first level we reverse variance
takeIntArg(@error:argWrongType(expected: :(v: int) => string) tenArg)
// string

==[variance 3]==
--[input]--
take10Arg(intArg)

--[output:expected]--
alias intArg=h67789f568964fa53a2df27ab843b718d0f9252f0 string=hd978df838905e7e1bd7bb33530ae12436e3756f4 take10Arg=h35f7ae1b4d73863baeacd76e318976ba557137da
take10Arg(intArg)
// string
/* take10Arg(intArg) */

==[level 2]==
--[input]--
takeIntArgTaker(takeIntArg)
take10ArgTaker(take10Arg)

--[output:expected]--
alias string=hd978df838905e7e1bd7bb33530ae12436e3756f4 take10Arg=h35f7ae1b4d73863baeacd76e318976ba557137da take10ArgTaker=hbaaa12ffbadf2f6368bb7391fbfb5469e9deddbe takeIntArg=hbbad4dcddf49fa76dadb8708898a93677da48de3 takeIntArgTaker=h614d6f0fc25f7afa2b36bae14edc03f26a27f6f3
takeIntArgTaker(takeIntArg)
// string
/* takeIntArgTaker(takeIntArg) */
take10ArgTaker(take10Arg)
// string
/* take10ArgTaker(take10Arg) */

==[level 2 good]==
--[input]--
takeIntArgTaker(take10Arg)

--[output:expected]--
alias string=hd978df838905e7e1bd7bb33530ae12436e3756f4 take10Arg=h35f7ae1b4d73863baeacd76e318976ba557137da takeIntArgTaker=h614d6f0fc25f7afa2b36bae14edc03f26a27f6f3
takeIntArgTaker(take10Arg)
// string
/* takeIntArgTaker(take10Arg) */

==[level 2 bad]==
--[input:shouldFail]--
take10ArgTaker(takeIntArg)

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 take10ArgTaker=hbaaa12ffbadf2f6368bb7391fbfb5469e9deddbe takeIntArg=hbbad4dcddf49fa76dadb8708898a93677da48de3
take10ArgTaker(@error:argWrongType(expected: :(fn: (v: 10) => string) => string) takeIntArg)
// string