##[builtins]##
//:value:hello:string
//:value:one:string

##[fixtures]##
==[basic]==
--[input]--
switch (1, 2) {
  (a, b) => a + b
  (x, y) => x
}

--[output:expected]--
alias +=h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c
switch (1, 2) {
  (a#[0], b#[1]) => (+)<1, 2>(a#[0], b#[1])
  (x#[2], y#[3]) => x#[2]
}
// 3

==[types]==
--[input]--
"${toString(10)} and ${one}"

--[output:expected]--
alias one=h75a4651f0e6841970290c6a4c7f547d57bb814ca string=hd978df838905e7e1bd7bb33530ae12436e3756f4 toString=h99b01457a189d1392ca641b22a79c97b3eda324c
"${toString(10)} and ${one}"
// string
/* `${toString(10)} and ${one}` */

==[Kitchen Sink]==
--[input:shouldFail]--
// ## Types ##
type x = 10 + 3
type y = "hello" + ".js"
type z = <T: int>(x: T) => T
type z2 = z<10>
type boundFail = z<"hello">
type over10 = <T: "test-" + string + ".js">(x: T) => int
type x = over10<"test-hello.js">
// ## Values ##
"a string"
"a template ${100} string"
10.2
10
true

--[output:expected]--
alias bool=h62d1b70cb3ae567d8df7d48fe634fd37fd0f5150 error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f error:notAString=h78fb9682caf6cb8dc34febba83e591c06884dc73 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f over10=hf961b33731b411c1b133523b8648fbda766f8c57 string=hd978df838905e7e1bd7bb33530ae12436e3756f4 z=h3de445e42abf3558018edf97a93680650ec16354
// ## Types ##
type x = 10 + 3
type y = "hello" + ".js"
type z = <T#[0]: int>(x: T#[0]) => T#[0]
type z2 = z<10>
type boundFail = z<@error:argWrongType(expected: :int) "hello">
type over10 = <T#[0]: "test-" + string + ".js">(x: T#[0]) => int
type x = over10<"test-hello.js">
// ## Values ##
"a string"
// "a string"
/* `a string` */
"a template ${@error:notAString() 100} string"
// string
10.2
// 10.2
/* 10.2 */
10
// 10
/* 10 */
true
// bool
/* true */

==[what]==
--[input]--
// ok

--[output:expected]--
// ok

--[builtins]--
//:type:Task:<E, T>