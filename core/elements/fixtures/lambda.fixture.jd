##[fixtures]##
==[basic]==
--[input]--
() => 10
(a: 10) => 10
// hello

--[output:expected]--
() => 10
// () => 10
/* () => 10 */
(a#[0]: 10) => 10
// (10) => 10
/* a => 10 */
// hello

==[pattern type mismatch]==
--[input:shouldFail]--
((a, b): 10) => 10

--[output:expected]--
alias error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f]
((a#[0], b#[1]): @error:argWrongType() 10) => 10

==[wait just acessing variable, what happens]==
--[input]--
(a: int) => a

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
(a#[0]: int) => a#[0]
// (int) => int
/* a => a */

==[playground of dreams]==
--[input:shouldFail]--
(a) => takesInt(a) + 2
((a, b)) => takesInt(a) + takes10(b)
({a, what}) => 10
// this is adding constraints
(a) => takesInt(a) + takes10(a)
// Ok folks, so why does 'res' show up as nothing in the one place,
// but _ on the reparse?
(a) => a(10)

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c] takesInt#[hd724811982a4afd89c79872d8c1d55048540a958]
(a#[0]) => takesInt(a#[0]) + 2
// (int) => int + 2
/* a => takesInt(a) + 2 */
alias takes10#[h454b6d446f18aea6c51a4b3599f3bf413c24ee76]
((a#[0], b#[1])) => takesInt(a#[0]) + takes10(b#[1])
// ((int, 10, *)) => int + int
/* ([a, b]) => takesInt(a) + takes10(b) */
({a#[0], what#[1]}) => 10
// this is adding constraints
(a#[0]) => takesInt(a#[0]) + takes10(a#[0])
// (10) => int + int
/* a => takesInt(a) + takes10(a) */
// Ok folks, so why does 'res' show up as nothing in the one place,
// but _ on the reparse?
(a#[0]) => a#[0](10)

--[builtins]--
//:value:takesInt:(a: int) => int
//:value:takes10:(a: 10) => int

==[New fixture]==
--[input]--
(a) => "${a}"

--[output:expected]--
(a#[0]) => "${a#[0]}"
// (string) => string
/* a => `${a}` */

==[New fixture_]==
--[input]--
(a) => takesInt(a) + takes10(a)

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c] takes10#[h454b6d446f18aea6c51a4b3599f3bf413c24ee76] takesInt#[hd724811982a4afd89c79872d8c1d55048540a958]
(a#[0]) => takesInt(a#[0]) + takes10(a#[0])
// (10) => int + int
/* a => takesInt(a) + takes10(a) */

--[builtins]--
//:value:takesInt:(a: int) => int
//:value:takes10:(a: 10) => int

==[resolve with int]==
--[input]--
(a) => a + 2

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c]
(a#[0]) => a#[0] + 2
// (int) => int + 2
/* a => a + 2 */

==[resolve with non-typeargs]==
--[input]--
(a) => 2.4 + a

--[output:expected]--
alias +#[h1b711bccf9aef2b0a1f3a7595ee93b32b87a881e]
(a#[0]) => 2.4 + a#[0]
// (float) => float
/* a => 2.4 + a */

==[New fixture__]==
--[input]--
3 == ((v) => v + 1)(2);

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c] ==#[ha4d3e814b6e823e777273070f4e78f59487993dc]
3 == ((v#[0]) => v#[0] + 1)(2)
// bool
/* 3 == (v => v + 1)(2) */

==[inference, before and after]==
--[input]--
(a: int, b) => (a == b, takesInt(a), a == b)

--[output:expected]--
alias ==#[ha4d3e814b6e823e777273070f4e78f59487993dc] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] takesInt#[hd724811982a4afd89c79872d8c1d55048540a958]
(a#[0]: int, b#[1]) => (a#[0] == b#[1], takesInt(a#[0]), a#[0] == b#[1])
// (int, int) => (bool, int, bool)
/* (a, b) => [a == b, takesInt(a), a == b] */

--[builtins]--
//:value:takesInt:(a: int) => int

==[recursive what]==
--[input]--
let longSum: (v: int) => int = (v#[0]: int) => if v#[0] > 0 {
    longSum(v#[0] + 1) - 1 + 1;
} else {
    0;
}
longSum(0)

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c] -#[h4dd9308469e477a4a756b4b286de0625d5a98af9] >#[hc1d03250b26806868f520136d8a763b0c0edff9b] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
let longSum: (v: int) => int = (v#[0]: int) => if v#[0] > 0 {
    longSum#[r0](v#[0] + 1) - 1 + 1;
} else {
    0;
}
// (int) => int
/* v => {
  if (v > 0) {
    return $terms.longSum(v + 1) - 1 + 1;
  } else {
    return 0;
  }
} */
alias longSum#[h827a3497e9d55c4a69922776df17cb98d96c26d1]
longSum(0)
// int
/* $terms.longSum(0) */