##[builtins]##
//:type:Array:<El>

##[fixtures]##
==[basic parsing]==
--[input]--
type x = [`hi | `what(int)]

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type x = [`hi | `what(int)]

==[recursive!]==
--[input]--
type Tree = <T>[Node<T> | `Leaf(T)]
and Node = <T>[`Tree(Array<Tree<T>>)]

--[output:expected]--
alias Array#[hfaffb478c8ace6bd4448b98b33f922f1bb3e15bf]
type Tree = <T#[0]>[Node#[r1]<T#[0]> | `Leaf(T#[0])]
and Node = <T#[1]>[`Tree(Array<Tree#[r0]<T#[1]>>)]

==[validate enum cases]==
--[input:shouldFail]--
type y = Array<10>
type z = [`Z]
type x = [int | `Hello | y | z]

--[output:expected]--
alias Array#[hfaffb478c8ace6bd4448b98b33f922f1bb3e15bf]
type y = Array<10>
type z = [`Z]
alias error:notAnEnum#[hf16010a7ae4b37140f787a2e06b17030e8329fb3] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] y#[he15b94e16ff596eaaece4602a19eb5e89caa90aa] z#[h114960c32561e86d49cc34f0af6e3db3deb19ffc]
type x = [@error:notAnEnum() int | `Hello | @error:notAnEnum() y | z]

==[recursive bound propagation]==
--[input]--
type What = <T: int>[ `Hello(What<10>) ]

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type What = <T#[0]: int>[`Hello(What#[r0]<10>)]

==[recursive bound propagation, failure]==
--[input:shouldFail]--
type X = <T: int>[ `Hello(X<"string">) ]

--[output:expected]--
alias error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type X = <T#[0]: int>[`Hello(X#[r0]<@error:argWrongType(expected: :int) "string">)]

==[recursive bound, own tvar]==
--[input]--
type X = <T: int>[ `X(X<T>) ]
type M = (<What>[ `X(What) | `Z(M) ])<int>
type N = int

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type X = <T#[0]: int>[`X(X#[r0]<T#[0]>)]
type M = (<What#[0]>[`X(What#[0]) | `Z(M#[r0])])<int>
type N = int

==[recursive bound, wrong tvar]==
--[input:shouldFail]--
type X = <T: int, N: string>[ `X(X<N, N>) ]

--[output:expected]--
alias error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
type X = <T#[0]: int, N#[1]: string>[`X(X#[r0]<@error:argWrongType(expected: :int) N#[1], N#[1]>)]

==[enum join should indicate failure]==
--[input:shouldFail]--
type One = [`A | `B]
type Two = [`A | One]
type Three = [`A(int) | One]
type Four = [ `A(int)]
type Five = [One | Four]

--[output:expected]--
type One = [`A | `B]
alias One#[hfb353110432771bdb690ef67d47cf80f61032eb9]
type Two = [`A | One]
alias error:conflictingEnumTag#[h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type Three = [`A(int) | @error:conflictingEnumTag(tag: "A") One]
type Four = [`A(int)]
alias Four#[h08e809c3cb23e4a94960588a78b6b0d43e80b5fe]
type Five = [One | @error:conflictingEnumTag(tag: "A") Four]

==[duplicate recursive]==
--[input:shouldFail]--
type One = [`A | Two]
and Two = [`A(int)]

--[output:expected]--
alias error:conflictingEnumTag#[h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type One = [`A | @error:conflictingEnumTag(tag: "A") Two#[r1]]
and Two = [`A(int)]

==[self recursive]==
--[input:shouldFail]--
type Self = [`A | Self]

--[output:expected]--
alias error:invalidEnum#[h49fbf0ea340043d002204371f9e00926593bae65]
type Self = [`A | @error:invalidEnum() Self#[r0]]

==[infinite]==
--[input:shouldFail]--
type X = Y#[r1]
and Y = X#[r0]

type A = [ `A | B#[r1] ]
and B = [ `B | A#[r0] ]

--[output:expected]--
alias error:invalidType#[h8ad8219d907bce91b14c7d3e00812287b0ab7056]
type X = @error:invalidType() Y#[r1]
and Y = @error:invalidType() X#[r0]
alias error:invalidEnum#[h49fbf0ea340043d002204371f9e00926593bae65]
type A = [`A | @error:invalidEnum() B#[r1]]
and B = [`B | @error:invalidEnum() A#[r0]]

==[duplicate]==
--[input:shouldFail]--
type X = [`A | `A(int)]

--[output:expected]--
alias error:conflictingEnumTag#[h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type X = [`A | @error:conflictingEnumTag() `A(int)]

==[New fixture]==
--[input:shouldFail]--
type A = [ `Awe ]
type B = [ A | `Awe(int) ] 
type C = [ `Awe(int) | A]

--[output:expected]--
type A = [`Awe]
alias A#[h96f3e9d89eef2da1279133d573e53be8aa09e51e] error:conflictingEnumTag#[h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
type B = [A | @error:conflictingEnumTag() `Awe(int)]
type C = [`Awe(int) | @error:conflictingEnumTag(tag: "Awe") A]

==[crafty recursive]==
--[input:shouldFail]--
type A = <T: [*]>[T | `A]
type B = [A<[B]> | `B]

--[output:expected]--
type A = <T#[0]: [*]>[T#[0] | `A]
alias A#[h4d5914cdf69cafb864469a21396ea610f4735200] error:argWrongType#[hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f] error:invalidEnum#[h49fbf0ea340043d002204371f9e00926593bae65] error:notAnEnum#[hf16010a7ae4b37140f787a2e06b17030e8329fb3]
type B = [
    @error:notAnEnum() A<@error:argWrongType(expected: :[*]) [@error:invalidEnum() B#[r0]]> |
    `B
]