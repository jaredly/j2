##[builtins]##
//:type:Array:<El>

##[fixtures]##
==[basic parsing]==
--[input]--
type x = [`hi | `what(int)]

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type x = [ `hi | `what(int) ]

==[recursive!]==
--[input]--
type Tree = <T>[Node<T> | `Leaf(T)]
and Node = <T>[`Tree(Array<Tree<T>>)]

--[output:expected]--
alias Array=h6ce318655ab4415711bb740c4f05155e4ac26aef
type Tree = <T#[0]>[ Node#[r1]<T#[0]> | `Leaf(T#[0]) ]
and Node = <T#[1]>[ `Tree(Array<Tree#[r0]<T#[1]>>) ]

==[validate enum cases]==
--[input:shouldFail]--
type y = Array<10>
type z = [`Z]
type x = [int | `Hello | y | z]

--[output:expected]--
alias Array=h6ce318655ab4415711bb740c4f05155e4ac26aef error:notAnEnum=hf16010a7ae4b37140f787a2e06b17030e8329fb3 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f y=hee62968c14dcbd5319a9fbb6bd597d3849030728 z=h0134ffd3e646c10f4287b09aec0838d7ac4f5cb8
type y = Array<10>
type z = [ `Z ]
type x = [ @error:notAnEnum() int | `Hello | @error:notAnEnum() y | z ]

==[recursive bound propagation]==
--[input]--
type What = <T: int>[ `Hello(What<10>) ]

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type What = <T#[0]: int>[ `Hello(What#[r0]<10>) ]

==[recursive bound propagation, failure]==
--[input:shouldFail]--
type X = <T: int>[ `Hello(X<"string">) ]

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type X = <T#[0]: int>[ `Hello(X#[r0]<@error:argWrongType(expected: :int) "string">) ]

==[recursive bound, own tvar]==
--[input]--
type X = <T: int>[ `X(X<T>) ]
type M = (<What>[ `X(What) | `Z(M) ])<int>
type N = int

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type X = <T#[0]: int>[ `X(X#[r0]<T#[0]>) ]
type M = (<What#[0]>[ `X(What#[0]) | `Z(M#[r0]) ])<int>
type N = int

==[recursive bound, wrong tvar]==
--[input:shouldFail]--
type X = <T: int, N: string>[ `X(X<N, N>) ]

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4
type X = <T#[0]: int, N#[1]: string>[ `X(X#[r0]<@error:argWrongType(expected: :int) N#[1], N#[1]>) ]

==[enum join should indicate failure]==
--[input:shouldFail]--
type One = [`A | `B]
type Two = [`A | One]
type Three = [`A(int) | One]
type Four = [ `A(int)]
type Five = [One | Four]

--[output:expected]--
alias error:conflictingEnumTag=h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec Four=hfbfd4d194279c72bb9c377f367cf241b9c616849 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f One=h3ab180fda5303b065a4bbf9b8ec23df40d83636a
type One = [ `A | `B ]
type Two = [ `A | One ]
type Three = [ `A(int) | @error:conflictingEnumTag(tag: "A") One ]
type Four = [ `A(int) ]
type Five = [ One | @error:conflictingEnumTag(tag: "A") Four ]

==[duplicate recursive]==
--[input:shouldFail]--
type One = [`A | Two]
and Two = [`A(int)]

--[output:expected]--
alias error:conflictingEnumTag=h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type One = [ `A | @error:conflictingEnumTag(tag: "A") Two#[r1] ]
and Two = [ `A(int) ]

==[self recursive]==
--[input:shouldFail]--
type Self = [`A | Self]

--[output:expected]--
alias error:invalidEnum=h49fbf0ea340043d002204371f9e00926593bae65
type Self = [ `A | @error:invalidEnum() Self#[r0] ]

==[infinite]==
--[input:shouldFail]--
type X = Y#[r1]
and Y = X#[r0]

type A = [ `A | B#[r1] ]
and B = [ `B | A#[r0] ]

--[output:expected]--
alias error:invalidEnum=h49fbf0ea340043d002204371f9e00926593bae65 error:invalidType=h8ad8219d907bce91b14c7d3e00812287b0ab7056
type X = @error:invalidType() Y#[r1]
and Y = @error:invalidType() X#[r0]
type A = [ `A | @error:invalidEnum() B#[r1] ]
and B = [ `B | @error:invalidEnum() A#[r0] ]

==[duplicate]==
--[input:shouldFail]--
type X = [`A | `A(int)]

--[output:expected]--
alias error:conflictingEnumTag=h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type X = [ `A | @error:conflictingEnumTag() `A(int) ]

==[New fixture]==
--[input:shouldFail]--
type A = [ `Awe ]
type B = [ A | `Awe(int) ] 
type C = [ `Awe(int) | A]

--[output:expected]--
alias A=hb5bc2b50d14c16cc0502a9fc8587a1c720291fb5 error:conflictingEnumTag=h33c8bdf60ea9b504da53d8f33b34a1096a62d8ec int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type A = [ `Awe ]
type B = [ A | @error:conflictingEnumTag() `Awe(int) ]
type C = [ `Awe(int) | @error:conflictingEnumTag(tag: "Awe") A ]