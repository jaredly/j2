##[fixtures]##
==[basic]==
--[input:shouldFail]--
switch (1, 2) {
  (a, b) => a + b
  1 => 1
  "what" => 20
  `Hello => 1
}

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c] error:patternMismatch#[h1bb5af1fd93cc04570b46a227234b3c89fbdd280]
switch (1, 2) {
  (a#[0], b#[1]) => a#[0] + b#[1]
  @error:patternMismatch() 1 => 1
  @error:patternMismatch() "what" => 20
  @error:patternMismatch() `Hello => 1
}

==[invalid return]==
--[input:shouldFail]--
switch `What {
  `Who => 1
  `Yes => 2
  `What =>  "hello"
}

--[output:expected]--
alias error:caseMismatch#[h83cceed949f4c31221b67a1e36c66dbd1dbcf86f] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
switch `What {
  `Who => 1
  `Yes => 2
  `What => @error:caseMismatch(expected: :int) "hello"
}

==[enum pattern wrong]==
--[input]--
switch `What(10) {
`What(hello) => hello
}

--[output:expected]--
switch `What(10) {
  `What(hello#[0]) => hello#[0]
}
// 10
/* (() => {
  switch ({
    tag: "What",
    payload: 10
  }.tag) {
    default:
      let {
        payload: hello
      } = {
        tag: "What",
        payload: 10
      };
      return hello;
  }
})() */

==[too many]==
--[input]--
((m: [`One | `Two(int)]) => switch m {
  `One => 1
  `Two => 4
  `Three => 2
})(`One)

--[output:expected]--
alias error:patternMismatch#[h1bb5af1fd93cc04570b46a227234b3c89fbdd280] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
(
    (m#[0]: [ `One | `Two(int) ]) => switch m#[0] {
      `One => 1
      `Two => 4
      @error:patternMismatch() `Three => 2
    },
)(`One)

==[bare switch]==
--[input]--
(m: [`One | `Two | `Three]) => switch m {
  `One => 1
  `Two => 2
  `Three => 3
}

--[output:expected]--
(m#[0]: [ `One | `Two | `Three ]) => switch m#[0] {
  `One => 1
  `Two => 2
  `Three => 3
}
// ([ `One | `Two | `Three ]) => int
/* m => {
  switch (m) {
    case "One":
      {
        return 1;
      }

    case "Two":
      {
        return 2;
      }

    case "Three":
      {
        return 3;
      }
  }
} */

==[New fixture_]==
--[input]--
switch (1, 2) {
  (a#[0], b#[1]) => a#[0] + b#[1]
}

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c]
switch (1, 2) {
  (a#[0], b#[1]) => a#[0] + b#[1]
}
// 3
/* (() => {
  switch ([1, 2]) {
    default:
      let [a, b] = [1, 2];
      return a + b;
  }
})() */

==[type refinement]==
--[input]--
(m: [`One | `Two | `Three(int)]) => switch m {
  `One => 1
  `Two => 2
  otherwise => {
    let `Three(v) = otherwise;
    v
  }
}

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
(m#[0]: [ `One | `Two | `Three(int) ]) => switch m#[0] {
  `One => 1
  `Two => 2
  otherwise#[1] => {
    let `Three(v#[2]) = otherwise#[1];
    v#[2];
}
}
// ([ `One | `Two | `Three(int) ]) => int
/* m => {
  switch (typeof m === "string" ? m : m.tag) {
    case "One":
      {
        return 1;
      }

    case "Two":
      {
        return 2;
      }

    default:
      let otherwise = m;
      let {
        payload: v
      } = otherwise;
      return v;
  }
} */

==[nested refinement]==
--[input]--
(m: [`One | `Two([`A | `B(int)])]) => switch m {
  `Two(`A) => 10
  `Two(res) => {
    let `B(v) = res;
    v
  }
}

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
(m#[0]: [ `One | `Two([ `A | `B(int) ]) ]) => switch m#[0] {
  `Two(`A) => 10
  `Two(res#[1]) => {
    let `B(v#[2]) = res#[1];
    v#[2];
}
}
// ([ `One | `Two([ `A | `B(int) ]) ]) => int
/* m => {
  switch too complex;
} */

==[Nested Record Refinement]==
--[input]--
(m: [`Hi(int, [`One | `Two(int)])]) => switch m {
  `Hi(v, `One) => 10
  `Hi(v, x) => {
    let `Two(n) = x;
    v + n
  }
}

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
(m#[0]: [ `Hi(int, [ `One | `Two(int) ]) ]) => switch m#[0] {
  `Hi(v#[1], `One) => 10
  `Hi(v#[2], x#[3]) => {
    let `Two(n#[4]) = x#[3];
    v#[2] + n#[4];
}
}
// ([ `Hi(int, [ `One | `Two(int) ]) ]) => int + int
/* m => {
  switch too complex;
} */