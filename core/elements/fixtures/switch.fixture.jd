##[fixtures]##
==[basic]==
--[input:shouldFail]--
switch (1, 2) {
  (a, b) => a + b
  1 => 1
  "what" => 20
`Hello => 1
}

--[output:expected]--
alias +=h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c error:patternMismatch=h1bb5af1fd93cc04570b46a227234b3c89fbdd280 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
switch (1, 2) {
  (a#[0], b#[1]) => a#[0] + b#[1]
  @error:patternMismatch() 1 => 1
  @error:patternMismatch() "what" => 20
  @error:patternMismatch() `Hello => 1
}
// int

==[invalid return]==
--[input:shouldFail]--
switch `What {
  `Who => 1
  `Yes => 2
  `What => "hello"
}

--[output:expected]--
alias error:caseMismatch=h83cceed949f4c31221b67a1e36c66dbd1dbcf86f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
switch `What {
  `Who => 1
  `Yes => 2
  `What => @error:caseMismatch(expected: :int) "hello"
}
// Error, no type!

==[enum pattern wrong]==
--[input:shouldFail]--
switch `What {
`What(hello) => hello
}

--[output:expected]--
alias error:patternMismatch=h1bb5af1fd93cc04570b46a227234b3c89fbdd280
switch `What {
  @error:patternMismatch() `What(hello#[0]) => hello#[:unresolved:]
}
// ()