##[fixtures]##
==[basic]==
--[input:shouldFail]--
switch (1, 2) {
  (a, b) => a + b
  1 => 1
  "what" => 20
  `Hello => 1
}

--[output:expected]--
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c] error:patternMismatch#[h1bb5af1fd93cc04570b46a227234b3c89fbdd280] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
switch (1, 2) {
  (a#[0], b#[1]) => a#[0] + b#[1]
  @error:patternMismatch() 1 => 1
  @error:patternMismatch() "what" => 20
  @error:patternMismatch() `Hello => 1
}
// int

==[invalid return]==
--[input:shouldFail]--
switch `What {
  `Who => 1
  `Yes => 2
  `What => "hello"
}

--[output:expected]--
alias error:caseMismatch#[h83cceed949f4c31221b67a1e36c66dbd1dbcf86f] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
switch `What {
  `Who => 1
  `Yes => 2
  `What => @error:caseMismatch(expected: :int) "hello"
}
// Error, no type!

==[enum pattern wrong]==
--[input]--
switch `What(10) {
`What(hello) => hello
}

--[output:expected]--
switch `What(10) {
  `What(hello#[0]) => hello#[0]
}
// 10
/* (() => {
  switch too complex;
})() */

==[New fixture]==
--[input]--
((m: [`One | `Two(int)]) => switch m {
  `One => 1
  `Two => 4
  `Three => 2
})(`One)

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
((m#[0]: [ `One | `Two(int) ]) => switch m#[0] {
  `One => 1
  `Two => 4
  `Three => 2
})(`One)
// int
/* (m => {
  switch (typeof m === "string" ? m : m.tag) {
    case "One":
      {
        return 1;
      }

    case "Two":
      {
        return 4;
      }

    case "Three":
      {
        return 2;
      }
  }
})("One") */

==[bare switch]==
--[input]--
(m: [`One | `Two | `Three]) => switch m {
  `One => 1
  `Two => 2
  `Three => 3
}

--[output:expected]--
alias int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f]
(m#[0]: [ `One | `Two | `Three ]) => switch m#[0] {
  `One => 1
  `Two => 2
  `Three => 3
}
// ([ `One | `Two | `Three ]) => int
/* m => {
  switch (m) {
    case "One":
      {
        return 1;
      }

    case "Two":
      {
        return 2;
      }

    case "Three":
      {
        return 3;
      }
  }
} */