##[builtins]##
//:value:hello:<T>(v: T) => T
//:decorator:decorate
//:value:multi:<A, B>(a: A, b: B) => A
//:value:bounded:<A: int>(a: A) => A
//:value:boundedDefault:<A: int, B: uint = 10u>(a: A, b: B) => A
//:value:takesInt:(a: int) => int
//:type:Array:<Element, Length: uint>
//:value:takesArray:(ar: Array<string, 10u>) => int
//:value:anArray:Array<string, 10u>
//:value:iadd:<A, B>(a: A, b: B) => A + B

##[fixtures]##
==[basic]==
--[input]--
hello<int>(10)

--[output:expected]--
alias hello=hda7294ffc909707ec4e6c0a68f226c52ec4cae25 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
hello<int>(10)
// int

==[decorate target]==
--[input]--
(@decorate() hello)<10>(10)

--[output:expected]--
alias decorate=h5a7fc9170718190f9388084b28fb49f6cb4602fc hello=hda7294ffc909707ec4e6c0a68f226c52ec4cae25
(@decorate() hello)(10)
// 10

==[multiple args]==
--[input]--
multi<int, string>
multi<int, string>(10, "hello")

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f multi=hc5961545e555b8c7c63bc6f08c8fdd379f0ede6e string=hd978df838905e7e1bd7bb33530ae12436e3756f4
multi<int, string>
// (a: int, b: string) => int
multi<int, string>(10, "hello")
// int

==[bounded]==
--[input]--
bounded<10>(10)
bounded<int>(10)

--[output:expected]--
alias bounded=hc51fab91793ea04f9d1f93e37ed42783cb09a337 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
bounded(10)
// 10
bounded<int>(10)
// int

==[bound fail]==
--[input:shouldFail]--
bounded<string>("wat")

--[output:expected]--
alias bounded=hc51fab91793ea04f9d1f93e37ed42783cb09a337 error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4
bounded<@error:argWrongType(expected: :int) string>("wat")
// Error, no type!

==[wrong args]==
--[input:shouldFail]--
bounded<int, string>(20)
takesInt<int>(10)

--[output:expected]--
alias bounded=hc51fab91793ea04f9d1f93e37ed42783cb09a337 error:extraArg=haae12b260f3d25abb4b67dfe8895a3c6fb00eb59 error:notATypeVars=hf975b139e8972496b3acf4c415c5bc460d39dd08 error:wrongNumberOfTypeArgs=h861c5babf48bbd7fc0325178615769bdb2837d5a int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takesInt=hd724811982a4afd89c79872d8c1d55048540a958
(@error:wrongNumberOfTypeArgs() bounded<int, @error:extraArg() string>)(20)
// int
(@error:notATypeVars() takesInt<int>)(10)
// int

==[arg default]==
--[input:shouldFail]--
@test:type(:Array<int, string, int>) 10

--[output:expected]--
alias Array=hcbc330037d21992f5bf3e9564e0da0474482efbc error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f error:extraArg=haae12b260f3d25abb4b67dfe8895a3c6fb00eb59 error:wrongNumberOfTypeArgs=h861c5babf48bbd7fc0325178615769bdb2837d5a int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 test:type=he071eaec952a7917f20d1828e42268ca3a10c513 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
@test:type(
    :@error:wrongNumberOfTypeArgs() Array<
        int,
        @error:argWrongType(expected: :uint) string,
        @error:extraArg() int,
    >,
) 10
// 10

==[taking a generic argument]==
--[input:shouldFail]--
takesArray(10)
takesArray(anArray)

--[output:expected]--
alias anArray=ha841469a8732a704d4c19413e4c8b5da394d5e23 Array=hcbc330037d21992f5bf3e9564e0da0474482efbc error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takesArray=he4b6904ec900e70c055cc6f7f494b9b7b489323b
takesArray(@error:argWrongType(expected: :Array<string, 10u>) 10)
// int
takesArray(anArray)
// int

==[chained]==
--[input]--
type x=<A: int><B: int>int
type y=x<int><10>

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f x=h3e41c83bbb51caebc377dccc7d3f00afc719d763
type x = <A#[0]: int><B#[1]: int>int
type y = x<int><10>

==[parnes]==
--[input]--
type Array = <Element, Length: uint>int
type x = (@test:type() Array)<int, 10u>

--[output:expected]--
alias Array=h7fc6ad7cebab7784c65cdf4ea15a11722e5ea809 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f test:type=he071eaec952a7917f20d1828e42268ca3a10c513 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
type Array = <Element#[0], Length#[1]: uint>int
type x = (@test:type() Array)<int, 10u>

==[variance?]==
--[input]--
type One = (v: int) => int
type Two = (v: 10) => int
// Should Three accept Two? NO
// Should Four accept One? YES
type Three = (l: One) => string // might pass any int to it
type Four = (l: Two) => string // will only pass 10 to it

// ## OK now to the actual question ##
type OneInt = <T: int>(v: T) => string
type OneTen = <T: 10>(v: T) => string
type TOneInt = (v: OneInt) => string
type TOneTen = (v: OneTen) => string
// ## Does TOneInt accept TOneTen? NO
// ## Does TOneTen accept TOneInt? YES
// ## We know that 10 matches int, but int does not match 10.
// ## I would expect it to reverse here?
type TwoInt = <T: int>(v: (m: T) => string) => string
type TwoTen = <T: 10>(v: (m: T) => string) => string
// ## And then I think it would reverse again here?

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f One=h782f3ce2b7c72249be64f4b9b8d4f0360597e092 OneInt=h1a17e948f13bdde3d6bcc891d4868a8cc1424ab8 OneTen=h8f5793e9567e2ebaf1ac87095dd9b703e322b4b7 string=hd978df838905e7e1bd7bb33530ae12436e3756f4 Two=h7e3fe5c70f6f8ff6d5e481b2cf6ac0518e0eb98e
type One = (v: int) => int
type Two = (v: 10) => int
// Should Three accept Two? NO
// Should Four accept One? YES
type Three = (l: One) => string
// might pass any int to it
type Four = (l: Two) => string
// will only pass 10 to it
// ## OK now to the actual question ##
type OneInt = <T#[0]: int>(v: T#[0]) => string
type OneTen = <T#[0]: 10>(v: T#[0]) => string
type TOneInt = (v: OneInt) => string
type TOneTen = (v: OneTen) => string
// ## Does TOneInt accept TOneTen? NO
// ## Does TOneTen accept TOneInt? YES
// ## We know that 10 matches int, but int does not match 10.
// ## I would expect it to reverse here?
type TwoInt = <T#[0]: int>(v: (m: T#[0]) => string) => string
type TwoTen = <T#[0]: 10>(v: (m: T#[0]) => string) => string
// ## And then I think it would reverse again here?

==[New fixture_]==
--[input]--
type IntA = (x: int) => string
type TenA =  (x: 10) => string
// # First we have basic variance. IntA can be passed to something expected a TenA, but not reversed.
type IntR = (x: string) => int
type TenR = (x: string) => 10
// # On the other hand, something producing an int can't be given to someone expecting something that produces a 10.
type Int = <T: int>(x: T) => T
type Ten = <T: 10>(x: T) => T
// # BUT, on the final hand, once you lock it down to something concrete, the return value isn't "maybe a subset of T", it's precisely T. Ok so I don't think we have to get fancy.
// 
// ### OK, so Something T
type TInt = (v: Int) => string
type TTen = (v: Ten) => string

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f Int=h9c73bde69a9ef5ef73fece595b08bb30890e97fa string=hd978df838905e7e1bd7bb33530ae12436e3756f4 Ten=hd5194c1cf3ebd11b04a83687209da35927a6b535
type IntA = (x: int) => string
type TenA = (x: 10) => string
// # First we have basic variance. IntA can be passed to something expected a TenA, but not reversed.
type IntR = (x: string) => int
type TenR = (x: string) => 10
// # On the other hand, something producing an int can't be given to someone expecting something that produces a 10.
type Int = <T#[0]: int>(x: T#[0]) => T#[0]
type Ten = <T#[0]: 10>(x: T#[0]) => T#[0]
// # BUT, on the final hand, once you lock it down to something concrete, the return value isn't "maybe a subset of T", it's precisely T. Ok so I don't think we have to get fancy.
//
// ### OK, so Something T
type TInt = (v: Int) => string
type TTen = (v: Ten) => string

==[default arg type]==
--[input]--
type DArray = <Element, Length: uint = uint>int
type Marray = DArray<int>
type TArray = DArray<int, 10u>

--[output:expected]--
alias DArray=h2e071faf3d824e5b58693ca6e0adf4c58e0c5f0e int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
type DArray = <Element#[0], Length#[1]: uint = uint>int
type Marray = DArray<int>
type TArray = DArray<int, 10u>

==[New fixture___]==
--[input]--
boundedDefault<int>

--[output:expected]--
alias boundedDefault=h558134f16a2f2008e5219367cfd76166dbe57bc2 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
boundedDefault<int>
// (a: int, b: 10u) => int

==[generic arg works]==
--[input]--
takesArray(anArray)

--[output:expected]--
alias anArray=ha841469a8732a704d4c19413e4c8b5da394d5e23 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f takesArray=he4b6904ec900e70c055cc6f7f494b9b7b489323b
takesArray(anArray)
// int

==[iadd apply]==
--[input]--
iadd(10, 20)

--[output:expected]--
alias iadd=h2cfd7dd7592887fc30e4d0388a059cdccb79dfa4
iadd(10, 20)
// 30