##[fixtures]##
==[typed print]==
--[input]--
let print = (v: string): Task<[`Print(string, ())]> => `Print(v, (()) => `Return())

--[output:expected]--
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (v#[0]: string):Task<[ `Print(string, ()) ]> => `Print(v#[0], (()) => `Return())
// (string) => [ `Print(string, (()) => [ `Return() ]) ]
/* v => ({
  tag: "Print",
  payload: [v, __0 => ({
    tag: "Return",
    payload: null
  })]
}) */

==[untyped print]==
--[input]--
let print = (v: string) => `Print(v, (()) => `Return())

--[output:expected]--
alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (v#[0]: string) => `Print(v#[0], (()) => `Return())
// (string) => [ `Print(string, (()) => [ `Return() ]) ]
/* v => ({
  tag: "Print",
  payload: [v, __0 => ({
    tag: "Return",
    payload: null
  })]
}) */

==[ensure we can unify with a larger task type]==
--[input]--
(v: Task<[`One((), [])]>): Task<[`One((), []) | `Two((), [])]> => v

--[output:expected]--
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274]
(v#[0]: Task<[ `One((), []) ]>):Task<[ `One((), []) | `Two((), []) ]> => v#[0]
// (Task<[ `One((), []) ]>) => Task<[ `One((), []) ]>
/* v => v */

==[New fixture]==
--[input:shouldFail]--
let print = (v: string): Task<[`Print(string, ())]> => `Pront(v, () => `Return())
let print = (v: string): Task<[`Print(string, ())]> => `Print(v, () => `Return(10))

--[output:expected]--
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274] error:resMismatch#[hb090f18487ae3bd77546a5c35ccf59b6adf3aa59] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (v#[0]: string):@error:resMismatch(inferrred: :[ `Pront(string, () => [ `Return() ]) ]) Task<
    [ `Print(string, ()) ],
> => `Pront(v#[0], () => `Return())
let print = (v#[0]: string):@error:resMismatch(
    inferrred: :[ `Print(string, () => [ `Return(10) ]) ],
) Task<[ `Print(string, ()) ]> => `Print(v#[0], () => `Return(10))

==[multiple effects]==
--[input]--
let hello = (): Task<[`Print(string, ()) | `Read((), string)]> => {
  `Print("hello", (()) => {
    `Read((), (v: string) => {
      `Print("Got ${v}", (()) => {
        `Print("done", (()) => `Return())
      })
    })
  })
}

--[output:expected]--
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let hello = ():Task<[ `Print(string, ()) | `Read((), string) ]> => {
    `Print(
        "hello",
        (()) => {
            `Read(
                (),
                (v#[0]: string) => {
                    `Print("Got ${v#[0]}", (()) => {
                        `Print("done", (()) => `Return());
                    });
                },
            );
        },
    );
}
// () => [ `Print("hello", (()) => [ `Read((), (string) => [ `Print(string, (()) => [ `Print("done", (()) => [ `Return() ]) ]) ]) ]) ]
/* () => {
  return {
    tag: "Print",
    payload: [`hello`, __0 => {
      return {
        tag: "Read",
        payload: [null, v => {
          return {
            tag: "Print",
            payload: [`Got ${v}`, __0 => {
              return {
                tag: "Print",
                payload: [`done`, __0 => ({
                  tag: "Return",
                  payload: null
                })]
              };
            }]
          };
        }]
      };
    }]
  };
} */

==[New fixture_]==
--[input]--
alias Task#[h36ea667ef0c00c6fcbfe2206360b8ce768e10926] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (value#[0]: string):Task<[ `Print(string, ()) ], ()> => `Print(
    value#[0],
    (()) => `Return(),
)
let read = () => `Read((), (v#[0]: string) => `Return(v#[0]))
alias andThen#[h98026f00fa782af79f115cf074faf3d04db06254] print#[he76ebf65079f6e6165c543967ddf344e04a21196] read#[h9a363f2b6907fcabe3bb866a4d9d96971fc54128]
let helloFolks = ():Task<[ `Read((), string) | `Print(string, ()) ], string> => {
    andThen<[ `Print(string, ()) ], [ `Read((), string) ], (), string>(
        print("What is your name?"),
        (res#[0]: ()) => read(),
    );
}

--[output:expected]--
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (value#[0]: string):Task<[ `Print(string, ()) ], ()> => `Print(
    value#[0],
    (()) => `Return(),
)
// (string) => [ `Print(string, (()) => [ `Return() ]) ]
/* value => ({
  tag: "Print",
  payload: [value, __0 => ({
    tag: "Return",
    payload: null
  })]
}) */
let read = () => `Read((), (v#[0]: string) => `Return(v#[0]))
// () => [ `Read((), (string) => [ `Return(string) ]) ]
/* () => ({
  tag: "Read",
  payload: [null, v => ({
    tag: "Return",
    payload: v
  })]
}) */
alias andThen#[h350018996371f8a646e144d264506c10d2ebde8b] print#[h9cd486c4e02278d3ec4134bd776fae112435529b] read#[hf1cbfa159d4d6ec5581f4a6706b6ebd6816f8091]
let helloFolks = ():Task<[ `Read((), string) | `Print(string, ()) ], string> => {
    andThen<[ `Print(string, ()) ], [ `Read((), string) ], (), string>(
        print("What is your name?"),
        (res#[0]: ()) => read(),
    );
}
// () => Task<[ [ `Print(string, ()) ] | [ `Read((), string) ] ], string>
/* () => {
  return andThen($terms.print(`What is your name?`), res => $terms.read());
} */

==[awaittt]==
--[input]--
let print = (value#[0]: string) => `Print(
    value#[0],
    (v: ()) => `Return(),
)
let read = () => `Read((), (v#[0]: string) => `Return(v#[0]))
let helloFolks = () => {    
  print("What is your name?")!
  print(read()!)!
}

--[output:expected]--
alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (value#[0]: string) => `Print(value#[0], (v#[1]: ()) => `Return())
// (string) => [ `Print(string, (()) => [ `Return() ]) ]
/* value => ({
  tag: "Print",
  payload: [value, v => ({
    tag: "Return",
    payload: null
  })]
}) */
let read = () => `Read((), (v#[0]: string) => `Return(v#[0]))
// () => [ `Read((), (string) => [ `Return(string) ]) ]
/* () => ({
  tag: "Read",
  payload: [null, v => ({
    tag: "Return",
    payload: v
  })]
}) */
alias print#[h98844d56b6470b17502bda64e11ca3589410f204] read#[hf1cbfa159d4d6ec5581f4a6706b6ebd6816f8091]
let helloFolks = () => {
    print("What is your name?")!;
    print(read()!)!;
}
// () => Task<[ `Print(string, ()) | `Print(string, ()) | `Read((), string) ], ()>
/* () => {
  return andThen($terms.print(`What is your name?`), __0 => {
    return andThen($terms.read(), tmp1000 => {
      return andThen($terms.print(tmp1000), tmp1001 => {
        return {
          tag: "Return",
          payload: tmp1001
        };
      });
    });
  });
} */

==[trying out withhandler - skip]==
--[input]--
let alwaysRead: (value: string, task: Task<[`Read((), string) | `Print(string, ())], string>) => Task<[`Print(string, ())], string> = (value: string, task: Task<[`Read((), string) | `Print(string, ())], string>): Task<[`Print(string, ())], string> => {
  switch task {
    `Return(v) => `Return("${v}") // whyy does this break, if we just do (v)
    `Read(v, k) => alwaysRead(value, k(value))
    otherwise => 
withHandler<[`Print(string, ())], string, [`Read((), string)]>(
      otherwise,
      (task) => alwaysRead(value, task)
    )
  }
}

--[output:expected]--
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4] withHandler#[h8c01e15c5414bbe2883805e74dc148e8b9811f04]
let alwaysRead: (value: string, task: Task<[ `Read((), string) | `Print(string, ()) ], string>) => Task<
    [ `Print(string, ()) ],
    string,
> = (value#[0]: string, task#[1]: Task<[ `Read((), string) | `Print(string, ()) ], string>):Task<
    [ `Print(string, ()) ],
    string,
> => {
    switch task#[1] {
      `Return(v#[2]) => `Return("${v#[2]}")
      `Read(v#[3], k#[4]) => alwaysRead#[r0](value#[0], k#[4](value#[0]))
      otherwise#[5] => withHandler<[ `Print(string, ()) ], string, [ `Read((), string) ]>(
        otherwise#[5],
        (task#[6]) => alwaysRead#[r0](value#[0], task#[6]),
    )
    };
}
// (string, Task<[ `Read((), string) | `Print(string, ()) ], string>) => [ `Return(string) | `Print(string, (arg: ()) => Task<[ `Print(string, ()) ], string>) ]
/* (value, task) => {
  return (() => {
    if (task.payload === "Return") {
      let {
        payload: v
      } = task;
      return {
        tag: "Return",
        payload: `${v}`
      };
    } else if (task.payload === "Read") {
      let {
        payload: [v, k]
      } = task;
      return $terms.alwaysRead(value, k(value));
    } else {
      let otherwise = task;
      {
        return withHandler(otherwise, task => $terms.alwaysRead(value, task));
      }
    }
  })();
} */
// whyy does this break, if we just do (v)

==[switch on a task]==
--[input]--
let hello = (t: Task<[`Read((), string) | `Print(string, ())], int>) => {
  switch t { 
    `Return(v) => v
    `Read((), k) => 100
    `Print(hello, k) => 1000
  }
}

--[output:expected]--
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274] int#[h942cd67cf31d350ec1f39bcd0c933f586dcd176f] string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let hello = (t#[0]: Task<[ `Read((), string) | `Print(string, ()) ], int>) => {
    switch t#[0] {
      `Return(v#[1]) => v#[1]
      `Read((), k#[2]) => 100
      `Print(hello#[3], k#[4]) => 1000
    };
}
// (Task<[ `Read((), string) | `Print(string, ()) ], int>) => int
/* t => {
  return (() => {
    if (t.payload === "Return") {
      let {
        payload: v
      } = t;
      return v;
    } else if (t.payload === "Read") {
      let {
        payload: [, k]
      } = t;
      return 100;
    } else {
      let {
        payload: [hello, k]
      } = t;
      {
        return 1000;
      }
    }
  })();
} */