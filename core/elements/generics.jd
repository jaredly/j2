##[builtins]##
//:value:hello:<T>(v: T) => T
//:decorator:decorate
//:value:multi:<A, B>(a: A, b: B) => A
//:value:bounded:<A: int>(a: A) => A
//:value:boundedDefault:<A: int, B: uint = 10>(a: A, b: B) => A
//:value:takesInt:(a: int) => int
//:type:Array:<Element, Length: uint>
//:value:takesArray:(ar: Array<string, 10>) => int
//:value:anArray:Array<string, 10>

##[fixtures]##
==[basic]==
--[input]--
hello<int>(10)

--[output:expected]--
alias hello=hf6e269898d7d9d035467350db13cfa38ac824c31 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
hello<int>(10)
// int

==[decorate target]==
--[input]--
(@decorate() hello)<10>(10)

--[output:expected]--
alias decorate=h5a7fc9170718190f9388084b28fb49f6cb4602fc hello=hf6e269898d7d9d035467350db13cfa38ac824c31
(@decorate() hello)<10>(10)
// 10

==[multiple]==
--[input]--
multi<int, string>
multi<int, string>(10, "hello")

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f multi=h088d53f5e3ddc6bf12a7e3054c4a52ebae49789d string=hd978df838905e7e1bd7bb33530ae12436e3756f4
multi<int, string>
// (a: int, b: string) => int
multi<int, string>(10, "hello")
// int

==[bounded]==
--[input]--
bounded<10>(10)

--[output:expected]--
alias bounded=h6b72cf1b6234557dd3846b2452db4a5f991da15d
bounded<10>(10)
// 10

==[bound fail]==
--[input:shouldFail]--
bounded<string>("wat")

--[output:expected]--
alias bounded=h6b72cf1b6234557dd3846b2452db4a5f991da15d error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4
bounded<@error:argWrongType(expected: :int) string>("wat")
// Error, no type!

==[wrong args]==
--[input:shouldFail]--
bounded<int, string>(20)
takesInt<int>(10)

--[output:expected]--
alias bounded=h6b72cf1b6234557dd3846b2452db4a5f991da15d error:extraArg=haae12b260f3d25abb4b67dfe8895a3c6fb00eb59 error:notATypeVars=hf975b139e8972496b3acf4c415c5bc460d39dd08 error:wrongNumberOfTypeArgs=h861c5babf48bbd7fc0325178615769bdb2837d5a int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takesInt=hd724811982a4afd89c79872d8c1d55048540a958
(@error:wrongNumberOfTypeArgs() bounded<int, @error:extraArg() string>)(20)
// int
(@error:notATypeVars() takesInt<int>)(10)
// int

==[arg default]==
--[input:shouldFail]--
@test:type(:Array<int, string, int>) 10

--[output:expected]--
alias Array=h8de4ecae93abe8de85536031f6f8a05742a6ee53 error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f error:extraArg=haae12b260f3d25abb4b67dfe8895a3c6fb00eb59 error:wrongNumberOfTypeArgs=h861c5babf48bbd7fc0325178615769bdb2837d5a int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 test:type=he071eaec952a7917f20d1828e42268ca3a10c513 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
@test:type(
    :@error:wrongNumberOfTypeArgs() Array<
        int,
        @error:argWrongType(expected: :uint) string,
        @error:extraArg() int,
    >,
) 10
// 10

==[New fixture]==
--[input:shouldFail]--
takesArray(10)
takesArray(anArray)

--[output:expected]--
alias anArray=h3b5b5f972e2903d7c82350fc80e38407c1f785a8 Array=h8de4ecae93abe8de85536031f6f8a05742a6ee53 error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takesArray=hcdd9a45603b52a498bc71cafbe9a0a4f62cb0d90
takesArray(@error:argWrongType(expected: :Array<string, 10>) 10)
// int
takesArray(anArray)
// int

==[chained]==
--[input]--
type x=<A: int><B: int>int
type y=x<int><10>

--[output:expected]--
alias A=0 B=1 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f x=h0d8310df73fdaf428bce85f3d744bff3eb9af0f8
type x = <A: int><B: int>int
// h0d8310df73fdaf428bce85f3d744bff3eb9af0f8
type y = x<int><10>
// heff9418191f4bf60af7e137ca80cf053136386f7

==[parnes]==
--[input]--
type Array = <Element, Length: uint>int
type x = (@test:type() Array)<int, 10>

--[output:expected]--
alias Array=h57714392b5a02ab755f186be825b4ed0a355f0ab Element=0 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f Length=1 test:type=he071eaec952a7917f20d1828e42268ca3a10c513 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
type Array = <Element, Length: uint>int
// h57714392b5a02ab755f186be825b4ed0a355f0ab
type x = (@test:type() Array)<int, 10>
// ha1ba1722f550b179d1ef8f493c3240ea77a942e6

==[variance?]==
--[input]--
type One = (v: int) => int
type Two = (v: 10) => int
// Should Three accept Two? NO
// Should Four accept One? YES
type Three = (l: One) => string // might pass any int to it
type Four = (l: Two) => string // will only pass 10 to it

// ## OK now to the actual question ##
type OneInt = <T: int>(v: T) => string
type OneTen = <T: 10>(v: T) => string
type TOneInt = (v: OneInt) => string
type TOneTen = (v: OneTen) => string
// ## Does TOneInt accept TOneTen? NO
// ## Does TOneTen accept TOneInt? YES
// ## We know that 10 matches int, but int does not match 10.
// ## I would expect it to reverse here?
type TwoInt = <T: int>(v: (m: T) => string) => string
type TwoTen = <T: 10>(v: (m: T) => string) => string
// ## And then I think it would reverse again here?

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f One=hf0a3686509a7741a3a15078be2cd944ff4ad9bf4 OneInt=h9b6f3c21ee80ec8cb6b81abd69d53b2785a2b72c OneTen=h643b1799d994ec63634821ca12ca2ef9d755ef20 string=hd978df838905e7e1bd7bb33530ae12436e3756f4 T=0 Two=haa87d495b9b9178d8a87e6775e4bd4ca3c4fe0e5
type One = (v: int) => int
// hf0a3686509a7741a3a15078be2cd944ff4ad9bf4
type Two = (v: 10) => int
// haa87d495b9b9178d8a87e6775e4bd4ca3c4fe0e5
// Should Three accept Two? NO
// Should Four accept One? YES
type Three = (l: One) => string
// hc8f1be7e01f83d98cc2a26fabeb06b5129f61b51
// might pass any int to it
type Four = (l: Two) => string
// h67ba592063d27762dd945f9a8d7489b48626364f
// will only pass 10 to it
// ## OK now to the actual question ##
type OneInt = <T: int>(v: T) => string
// h9b6f3c21ee80ec8cb6b81abd69d53b2785a2b72c
type OneTen = <T: 10>(v: T) => string
// h643b1799d994ec63634821ca12ca2ef9d755ef20
type TOneInt = (v: OneInt) => string
// h2a86bd2b935075c637309c1920dddc1f133be2eb
type TOneTen = (v: OneTen) => string
// h9721e242a28a0703b680153ff2cfe2f980905ac8
// ## Does TOneInt accept TOneTen? NO
// ## Does TOneTen accept TOneInt? YES
// ## We know that 10 matches int, but int does not match 10.
// ## I would expect it to reverse here?
type TwoInt = <T: int>(v: (m: T) => string) => string
// h5ccdb324a29bae6be7c39c9097f8d164a768af63
type TwoTen = <T: 10>(v: (m: T) => string) => string
// h573a56c9cd70835fe51b874bda57e2c48d19df30
// ## And then I think it would reverse again here?

==[New fixture_]==
--[input]--
type IntA = (x: int) => string
type TenA =  (x: 10) => string
// # First we have basic variance. IntA can be passed to something expected a TenA, but not reversed.
type IntR = (x: string) => int
type TenR = (x: string) => 10
// # On the other hand, something producing an int can't be given to someone expecting something that produces a 10.
type Int = <T: int>(x: T) => T
type Ten = <T: 10>(x: T) => T
// # BUT, on the final hand, once you lock it down to something concrete, the return value isn't "maybe a subset of T", it's precisely T. Ok so I don't think we have to get fancy.
// 
// ### OK, so Something T
type TInt = (v: Int) => string
type TTen = (v: Ten) => string

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f Int=h989c35b6397efed1b7129b19218f5b5e685ee31f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 T=0 Ten=he849df644a34fb77856bcb8d4cf9769557a08d21
type IntA = (x: int) => string
// he41867e15b7e3f0f932253fdf32c9b4a0260ebc1
type TenA = (x: 10) => string
// hcf448236de5c6e16d2eae86bbc448bf2da30fddb
// # First we have basic variance. IntA can be passed to something expected a TenA, but not reversed.
type IntR = (x: string) => int
// hf235bf94c0540612e7a742911c092ee4d746a14a
type TenR = (x: string) => 10
// heeea2b358466eb1f3c3446f8d95d0fadca41474b
// # On the other hand, something producing an int can't be given to someone expecting something that produces a 10.
type Int = <T: int>(x: T) => T
// h989c35b6397efed1b7129b19218f5b5e685ee31f
type Ten = <T: 10>(x: T) => T
// he849df644a34fb77856bcb8d4cf9769557a08d21
// # BUT, on the final hand, once you lock it down to something concrete, the return value isn't "maybe a subset of T", it's precisely T. Ok so I don't think we have to get fancy.
//
// ### OK, so Something T
type TInt = (v: Int) => string
// hf0cac5bb3702158c6edc0f40f842f5ed3075091f
type TTen = (v: Ten) => string
// h490d159f1e77bd4eea4cc28db01c460b880c0e25

==[New fixture__]==
--[input]--
type DArray = <Element, Length: uint = uint>int
type Marray = DArray<int>
type TArray = DArray<int, 10>

--[output:expected]--
alias DArray=h4a70283eb453c226d5fa09f4230057b901cb63b8 Element=0 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f Length=1 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
type DArray = <Element, Length: uint = uint>int
// h4a70283eb453c226d5fa09f4230057b901cb63b8
type Marray = DArray<int>
// h4ba493696830de81b2c129583bbead94914dc054
type TArray = DArray<int, 10>
// h9059382faeeb1bf719d7ff1e44473a2d9ac19a55

==[New fixture___]==
--[input]--
boundedDefault<int>

--[output:expected]--
alias boundedDefault=hc4316951341561217c1d42557785019239254ba1 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
boundedDefault<int>
// (a: int, b: 10) => int