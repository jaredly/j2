##[builtins]##
//:value:hello:<T>(v: T) => T
//:decorator:decorate
//:value:multi:<A, B>(a: A, b: B) => A
//:value:bounded:<A: int>(a: A) => A

##[fixtures]##
==[basic]==
--[input]--
hello<int>(10)

--[output:expected]--
alias int=h2f181c91131fd0daa282424fb3953604513df6fe hello=h43ba1c6824812d5f77acb88da15a2d3ff56d087a
hello<int>(10)
// int

==[decorate target]==
--[input]--
(@decorate() hello)<10>(10)

--[output:expected]--
alias hello=h43ba1c6824812d5f77acb88da15a2d3ff56d087a decorate=h5a7fc9170718190f9388084b28fb49f6cb4602fc
(@decorate() hello)<10>(10)
// 10

==[multiple]==
--[input]--
multi<int, string>
multi<int, string>(10, "hello")

--[output:expected]--
alias int=h2f181c91131fd0daa282424fb3953604513df6fe string=h8f452146b75c912dedc5638091c55a088e30b7ee multi=hbd8c1523d9d5c9253bb8d9e3e9613131b5415b21
multi<int, string>
// (a: int, b: string) => int
multi<int, string>(10, "hello")
// int

==[bounded]==
--[input]--
bounded<10>(10)

--[output:expected]--
alias bounded=h0aea81f2654e55c75234d4643a01d23bca887954
bounded<10>(10)
// 10

==[bound fail]==
--[input:shouldFail]--
bounded<string>("wat")

--[output:expected]--
alias string=h8f452146b75c912dedc5638091c55a088e30b7ee bounded=h0aea81f2654e55c75234d4643a01d23bca887954
bounded<string>("wat")
// string