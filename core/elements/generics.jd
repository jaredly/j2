##[builtins]##
//:value:hello:<T>(v: T) => T
//:decorator:decorate
//:value:multi:<A, B>(a: A, b: B) => A
//:value:bounded:<A: int>(a: A) => A
//:value:takesInt:(a: int) => int
//:type:Array:<Element, Length: uint>
//:value:takesArray:(ar: Array<string, 10>) => int
//:value:anArray:Array<string, 10>

##[fixtures]##
==[basic]==
--[input]--
hello<int>(10)

--[output:expected]--
alias hello=hf6e269898d7d9d035467350db13cfa38ac824c31 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
hello<int>(10)
// int

==[decorate target]==
--[input]--
(@decorate() hello)<10>(10)

--[output:expected]--
alias decorate=h5a7fc9170718190f9388084b28fb49f6cb4602fc hello=hf6e269898d7d9d035467350db13cfa38ac824c31
(@decorate() hello)<10>(10)
// 10

==[multiple]==
--[input]--
multi<int, string>
multi<int, string>(10, "hello")

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f multi=h088d53f5e3ddc6bf12a7e3054c4a52ebae49789d string=hd978df838905e7e1bd7bb33530ae12436e3756f4
multi<int, string>
// (a: int, b: string) => int
multi<int, string>(10, "hello")
// int

==[bounded]==
--[input]--
bounded<10>(10)

--[output:expected]--
alias bounded=h6b72cf1b6234557dd3846b2452db4a5f991da15d
bounded<10>(10)
// 10

==[bound fail]==
--[input:shouldFail]--
bounded<string>("wat")

--[output:expected]--
alias bounded=h6b72cf1b6234557dd3846b2452db4a5f991da15d string=hd978df838905e7e1bd7bb33530ae12436e3756f4
bounded<string>("wat")
// Error, no type!

==[wrong args]==
--[input:shouldFail]--
bounded<int, string>(20)
takesInt<int>(10)

--[output:expected]--
alias bounded=h6b72cf1b6234557dd3846b2452db4a5f991da15d error:notATypeVars=hf975b139e8972496b3acf4c415c5bc460d39dd08 error:wrongNumberOfTypeArgs=h861c5babf48bbd7fc0325178615769bdb2837d5a int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takesInt=hd724811982a4afd89c79872d8c1d55048540a958
(@error:wrongNumberOfTypeArgs() bounded<int, string>)(20)
// int
(@error:notATypeVars() takesInt<int>)(10)
// int

==[arg defulat]==
--[input:shouldFail]--
@test:type(:Array<int, string, int>) 10

--[output:expected]--
alias Array=hec476a05f5b96e6cde2e810873da9ea402334adc error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f error:extraArg=haae12b260f3d25abb4b67dfe8895a3c6fb00eb59 error:wrongNumberOfTypeArgs=h861c5babf48bbd7fc0325178615769bdb2837d5a int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 test:type=he071eaec952a7917f20d1828e42268ca3a10c513 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
@test:type(
    :@error:wrongNumberOfTypeArgs() Array<
        int,
        @error:argWrongType(expected: :uint) string,
        @error:extraArg() int,
    >,
) 10
// 10

==[New fixture]==
--[input:shouldFail]--
takesArray(10)
takesArray(anArray)

--[output:expected]--
alias anArray=h6190b2c5c57f746c61bbf06a1b0a9dcedd9ccbcd Array=hec476a05f5b96e6cde2e810873da9ea402334adc error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 takesArray=hb8c390c12bc700fe47a8200e3a22c5d9773c3458
takesArray(@error:argWrongType(expected: :Array<string, 10>) 10)
// int
takesArray(anArray)
// int

==[chained]==
--[input]--
type x=<A: int><B: int>int
type y=x<int><10>

--[output:expected]--
alias A=6 B=7 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f x=h1c9b7191723a4de929b4df34f8741f109359dfb3
type x = <A: int><B: int>int
// he6250023a3239a39e160d8aa2d9e96e24c8c32aa
type y = x<int><10>
// h88225b8f4eda9443eb5cb68a97a697d2d4d86784

==[parnes]==
--[input]--
type Array = <Element, Length: uint>int
type x = (@test:type() Array)<int, 10>

--[output:expected]--
alias Array=h28fcc96082d8366d9577a5ef27eb4de5d1d39fa7 Element=6 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f Length=7 test:type=he071eaec952a7917f20d1828e42268ca3a10c513 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
type Array = <Element, Length: uint>int
// h67fc5ec0d02889b740fafa847cd01eab60e9cc4c
type x = (@test:type() Array)<int, 10>
// h3dc3f926d4edce38161a72f396978a3375c0e505