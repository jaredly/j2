##[builtins]##
//:type:Array:<El>

##[fixtures]##
==[basic parsing]==
--[input]--
type x = [`hi | `what(int)]

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f
type x = [ `hi | `what(int) ]

==[recursive!]==
--[input]--
type Tree = <T>[Node<T> | `Leaf(T)]
and Node = <T>[`Tree(Array<Tree<T>>)]

--[output:expected]--
alias Array=he7bf755aa7882e15fa79faeef0820a69a5955b78 Node=r1 T=0 Tree=r0
type Tree = <T>[ Node<T> | `Leaf(T) ]
and Node = <T>[ `Tree(Array<Tree<T>>) ]

==[some enum exprs]==
--[input]--
`What(10)
`Hello(`Folks)

--[output:expected]--
`What(10)
// [ `What(10) ]
`Hello(`Folks)
// [ `Hello([ `Folks ]) ]

==[recursive bound propagation]==
--[input]--
type What = <T: int>[ `Hello(What<10>) ]

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f T=0 What=r0
type What = <T: int>[ `Hello(What<10>) ]

==[recursive bound propagation, failure]==
--[input:shouldFail]--
type X = <T: int>[ `Hello(X<"string">) ]

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f T=0 X=r0
type X = <T: int>[ `Hello(X<@error:argWrongType(expected: :int) "string">) ]

==[recursive bound, own tvar]==
--[input]--
type X = <T: int>[ `X(X<T>) ]

--[output:failed]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f T=0 X=r0
type X = <T: int>[ `X(X<@error:argWrongType(expected: :int) T>) ]