/**
 * This example implements many of the examples from the eff paper[1],
 * to showcase the completeness of the algebraic effects
 * implementation.
 *
 * [1]: https://www.eff-lang.org/handlers-tutorial.pdf
 */
type Read = [`Read((), string)]
type Write = [`Write(string, ())]
let print = (x: string) => `Write(x, (()) => `Return())
let read = `Read((), (v: string) => `Return(v))
let alwaysRead = <Inner: task, R>(readResponse: string, task: Task<[Read | Inner], R>): Task<
    [Inner],
    R,
> => {
    switch task {
        `Return(result) => `Return(result);
        `Read(_, k) => alwaysRead<Inner, R>(readResponse, k(readResponse));
        otherwise => withHandler<[Inner], R, [Read], R>(
            otherwise,
            (task) => alwaysRead<Inner, R>(readResponse, task),
        );
    };
}
let collect = <Inner: task>(task: Task<[Write | Inner], ()>): Task<Inner, string> => switch task {
    `Return() => `Return("end");
    `Write(v, k) => andThen<Inner, [], string, string>(
        collect<Inner>(k(())),
        (res) => `Return("${v}\n${res}"),
    );
    otherwise => withHandler<Inner, (), Write, string>(otherwise, collect<Inner>);
}
{
    let `Return(v) = collect<[]>((() => {
        print("Hello")!;
        print("World")!;
    })());
    v == "Hello\nWorld\nend";
}
{
    let `Return(v) = collect<[]>(
        alwaysRead<[Write], ()>("hi", (() => {
            print("${read!} and ${read!}")!;
        })()),
    );
    v == "hi and hi\nend";
}
let reverse: (t: Task<Write, ()>) => Task<Write, ()> = (task: Task<Write, ()>) => switch task {
    `Return(v) => `Return(v);
    `Write(v, k) => (() => {
        reverse(k(()))!;
        print(v)!;
    })();
}
let expect = <T: eq>(`Return(m): Task<[], T>, e: T) => m == e
expect<string>(
    collect<[]>(reverse((() => {
        print("A")!;
        print("B")!;
        print("C")!;
    })())),
    "C\nB\nA\nend",
)
type Decide = [`Decide((), bool)]
let decide: Task<Decide, bool> = `Decide((), (b: bool) => `Return(b))
let choose = <T>(x: T, y: T) => {
    if decide! {
        x;
    } else {
        y;
    };
}
let pickTrue: <T>(Task<Decide, T>) => T = <T>(task: Task<Decide, T>): T => switch task {
    `Return(v) => v;
    `Decide(_, k) => pickTrue<T>(k(true));
}
let chooseDiff = () => {
    let x1 = choose<int>(15, 30)!;
    let x2 = choose<int>(5, 10)!;
    x1 - x2;
}
pickTrue<int>(chooseDiff()) == 10
let pickMax: (Task<Decide, int>) => int = (task: Task<Decide, int>): int => {
    switch task {
        `Return(v) => v;
        `Decide(_, k) => {
            let one = pickMax(k(true));
            let two = pickMax(k(false));
            if one > two {
                one;
            } else {
                two;
            };
        };
    };
}
pickMax(chooseDiff()) == 25
type Fail = [`Fail((), [])]
let fail = `Fail((), ())
let chooseInt: (int, int) => Task<[Decide | Fail], int> = (m: int, n: int): Task<[Decide | Fail], int> => {
    if m > n {
        fail!;
    } else {
        if decide! {
            m;
        } else {
            chooseInt(m + 1, n)!;
        };
    };
}
let pythagorean = (m: int, n: int) => {
    let a = chooseInt(m, n - 1)!;
    let b = chooseInt(a + 1, n)!;
    let a2 = a * a;
    let b2 = b * b;
    if isSquare(a2 + b2) {
        (a, b);
    } else {
        fail!;
    };
}
let backtrack: <T>(Task<[Decide | Fail], T>, () => T) => T = <T>(
    task: Task<[Decide | Fail], T>,
    orElse: () => T,
): T => {
    switch task {
        `Decide(_, k) => {
            backtrack<T>(k(true), () => backtrack<T>(k(false), orElse));
        };
        `Fail(_, _) => {
            orElse();
        };
        `Return(x) => x;
    };
}
let backtrackPythag = (m: int, n: int) => backtrack<(int, int)>(pythagorean(m, n), () => (0, 0))
backtrackPythag(4, 15) == (5, 12)
backtrackPythag(7, 10) == (0, 0)