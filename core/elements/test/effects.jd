alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (value#[0]: string) => `Print(value#[0], (()) => `Return())
let read = `Read((), (v#[0]: string) => `Return(v#[0]))
alias print#[h795e726bf4f5e172635cc0179d9ca57474b0b4d1] read#[hb4960a73062670598fa2100bb3c961af8368de28]
let helloFolks = () => {
    print("Hello folks")!;
    print("Got ${read!}!")!;
    "done ${read!}";
}
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274]
let fail: Task<[ `Failure([ `Bad | `News(string) ], []) ]> = `Failure(`Bad, ())
type Read = [ `Read((), string) ]
type Print = [ `Print(string, ()) ]
alias Print#[h54ed15b99ee8e24a9deca9b4c3d180679bfcf096] Read#[h39d4a8221a80e1486be57f401a27a7eb6b0afc3c] withHandler#[h8c01e15c5414bbe2883805e74dc148e8b9811f04]
let alwaysRead: (value: string, task: Task<[ Read | Print ], string>) => Task<[ Print ], string> = (
    value#[0],
    task#[1],
) => {
    switch task#[1] {
      `Return(v#[2]) => `Return(v#[2])
      `Read(v#[3], k#[4]) => alwaysRead#[r0](value#[0], k#[4](value#[0]))
      otherwise#[5] => withHandler<[ Print ], string, [ Read ]>(
        otherwise#[5],
        (task#[6]) => alwaysRead#[r0](value#[0], task#[6]),
    )
    };
}
alias ==#[ha4d3e814b6e823e777273070f4e78f59487993dc] alwaysRead#[haadc04faf841a5d121698c4adf85ed7850183296] helloFolks#[hb34eb29d75f7574d7fd901955681919a20fa757a] testIO#[h69ce4c33e9e9ba9af7129accb6794008258bb41c]
testIO<string>("what", alwaysRead("who", helloFolks())) == "done who"
let collect: (c: string, t: Task<[ Print ], ()>) => string = (
    collected#[0]: string,
    task#[1]: Task<[ Print ], ()>,
) => switch task#[1] {
  `Return() => collected#[0]
  `Print(value#[2], k#[3]) => collect#[r0]("${collected#[0]}\n${value#[2]}", k#[3](()))
}
let inner = () => {
    print(alwaysRead("who", helloFolks())!)!;
}
alias collect#[hafed69e0b1c3913640dace4be6f08fa580ed5737] inner#[h58a8c80544e892d67d836b10a01141055fcb1312]
collect("Initial", inner()) == "Initial\nHello folks\nGot who!\ndone who"