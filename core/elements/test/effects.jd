alias string#[hd978df838905e7e1bd7bb33530ae12436e3756f4]
let print = (value#[0]: string) => `Print(value#[0], (()) => `Return())
let read = `Read((), (v#[0]: string) => `Return(v#[0]))
alias print#[h795e726bf4f5e172635cc0179d9ca57474b0b4d1] read#[hb4960a73062670598fa2100bb3c961af8368de28]
let helloFolks = () => {
    print("Hello folks")!;
    print("Got ${read!}!")!;
    "done ${read!}";
}
alias *#[hc964b8e32721e8a2764054a069ab98c885f00921] ==#[ha4d3e814b6e823e777273070f4e78f59487993dc]
// testIO<string>("test", helloFolks()) == "done test"
2 == 2 * 1
alias +#[h3040ed1f3de0b98f18bd2b6daeb0e695cd0b608c]
3 == 2 + 1
alias Task#[h67d00eba961cd5135110775d8654598dc22e7274]
// Hmm some
let fail: Task<[ `Failure([ `Bad | `News(string) ], []) ]> = `Failure(`Bad, ())
alias withHandler#[h8c01e15c5414bbe2883805e74dc148e8b9811f04]
let alwaysRead: (value: string, task: Task<[ `Read((), string) | `Print(string, ()) ], string>) => Task<
    [ `Print(string, ()) ],
    string,
> = (value#[0]: string, task#[1]: Task<[ `Read((), string) | `Print(string, ()) ], string>) => {
    switch task#[1] {
      `Return(v#[2]) => `Return(v#[2])
      `Read(v#[3], k#[4]) => alwaysRead#[r0](value#[0], k#[4](value#[0]))
      otherwise#[5] => withHandler<[ `Print(string, ()) ], string, [ `Read((), string) ]>(
        otherwise#[5],
        (task#[6]) => alwaysRead#[r0](value#[0], task#[6]),
    )
    };
}
alias alwaysRead#[h711ff543df943720c95be4e08d447d90bad7a49d] helloFolks#[hb34eb29d75f7574d7fd901955681919a20fa757a] testIO#[h69ce4c33e9e9ba9af7129accb6794008258bb41c]
testIO<string>("what", alwaysRead("who", helloFolks())) == "done who"