let print = (value: string) => `Print(value, (()) => `Return())
let read = `Read((), (result: string) => `Return(result))
let helloFolks = () => {
    print("Hello folks")!;
    print("Got ${read!}!")!;
    "done ${read!}";
}
type Read = [`Read((), string)]
type Print = [`Print(string, ())]
let alwaysRead = <Inner: task>(readResponse: string, task: Task<[Read | Inner], string>): Task<
    Inner,
    string,
> => {
    switch task {
        `Return(result) => `Return(result);
        `Read(_, k) => alwaysRead<Inner>(readResponse, k(readResponse));
        otherwise => withHandler<Inner, string, Read, string>(
            otherwise,
            (task) => alwaysRead<Inner>(readResponse, task),
        );
    };
}
let collect: (string, Task<[Print], ()>) => string = (collected, task) => switch task {
    `Return() => collected;
    `Print(value, k) => collect("${collected}\n${value}", k(()));
}
let inner = () => {
    print(alwaysRead<Print>("who", helloFolks())!)!;
}
collect("Initial", inner()) == "Initial\nHello folks\nGot who!\ndone who"