type attrs = <Effects: task>{
    style: {display: string = "", flex: uint = 1u, padding: string = ""} = (),
    onClick: () => Task<Effects, ()> = () => `Return(),
}
type Node = <Effects: task>[`Node(string, attrs<Effects>, Array<Node<Effects>>) | `Text(string)]
let setState = <State>(v: State) => `SetState(v, (()) => `Return())
let getHttp = (url: string) => `HttpFetch(url, (v: string) => `Return(v))
let counter = (state: int) => {
    `Node(
        "div",
        {style: {display: "flex", flex: 1u}},
        [
            `Node("button", {onClick: () => setState(state - 1)}, [`Text("-")]),
            `Text("Counter ${toString(state)}"),
            `Node("button", {onClick: () => setState(state + 1)}, [`Text("+")]),
        ],
    );
}
let render = <State>(app: (current: State) => Node<[`SetState(State, ())]>) => `Render(app, ())
render(counter)