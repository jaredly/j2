type A = <T: [*]>[T | `A]
type B = [@expect("invalidEnum") A<[B]> | `B(int)]
type List1 = [`Cons(List1, int) | `Nil]
type List2 = [`Cons(List2, int) | `Nil]
let one = (v: int): List2 => `Cons(`Nil, v)
let pop = (v: List2) => switch v {
    `Nil => 0;
    `Cons(_, n) => n + 2;
}
pop(`Cons(`Nil, 21))
one(20)
pop(one(1))
let two = (v: int): List2 => `Cons(`Nil, v)