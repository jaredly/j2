##[builtins]##
//:value:hello:(v: "hello") => int
//:value:ten:(v: 10) => int
//:value:id:<T>(x: T) => T
//:value:wantsId:(v: <T>(x: T) => T) => int
//:type:Array:<Element>

##[fixtures]##
==[basic]==
--[input]--
@test:type(: bool) 10

--[output:expected]--
alias bool=h62d1b70cb3ae567d8df7d48fe634fd37fd0f5150 test:type=he071eaec952a7917f20d1828e42268ca3a10c513
@test:type(:bool) 10
// 10

==[constants]==
--[input]--
@test:type(: "hello", : 10) "target"

--[output:expected]--
alias test:type=he071eaec952a7917f20d1828e42268ca3a10c513
@test:type(:"hello", :10) "target"
// "target"

==[lambdas]==
--[input]--
@test:type(: () => 10, :(v: int, float) => int) "ok"

--[output:expected]--
alias float=h1c9cc9450fe2e869a48abaa5e4a85271e1625474 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f test:type=he071eaec952a7917f20d1828e42268ca3a10c513
@test:type(:() => 10, :(v: int, float) => int) "ok"
// "ok"

==[tvars]==
--[input]--
@test:type(: <T>(v: T) => T) 10

--[output:expected]--
alias test:type=he071eaec952a7917f20d1828e42268ca3a10c513
@test:type(:<T#[0]>(v: T#[0]) => T#[0]) 10
// 10

==[unresovled]==
--[input:shouldFail]--
@test:type(: hello) 10

--[output:expected]--
alias test:type=he071eaec952a7917f20d1828e42268ca3a10c513
@test:type(:hello#[:unresolved:]) 10
// 10

==[arg default]==
--[input]--
@test:type(: <T: string, A: int = 10>(a: T, b: A) => A) 100

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 test:type=he071eaec952a7917f20d1828e42268ca3a10c513
@test:type(:<T#[0]: string, A#[1]: int = 10>(a: T#[0], b: A#[1]) => A#[1]) 100
// 100

==[basic type alias]==
--[input]--
type hello = int
@test:type(: hello) 10

--[output:expected]--
alias hello=h75177a7b7b2159da5e4d8a4898f1f344d3180b7d int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f test:type=he071eaec952a7917f20d1828e42268ca3a10c513
type hello = int
@test:type(:hello) 10
// 10

==[bound]==
--[input:shouldFail]--
type StringMe = <T: string>int;
@test:type(:StringMe<20>) 10
@test:type(:StringMe<"hello">) 10

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 StringMe=h0af32067f3903aca3f50b6f63928f6a239883e4a test:type=he071eaec952a7917f20d1828e42268ca3a10c513
type StringMe = <T#[0]: string>int
@test:type(:StringMe<@error:argWrongType(expected: :string) 20>) 10
// 10
@test:type(:StringMe<"hello">) 10
// 10

==[decorate the type]==
--[input]--
@test:type(: @test:type() string) 10

--[output:expected]--
alias string=hd978df838905e7e1bd7bb33530ae12436e3756f4 test:type=he071eaec952a7917f20d1828e42268ca3a10c513
@test:type(:@test:type() string) 10
// 10

==[literals]==
--[input:shouldFail]--
hello("hello")
hello("ho")
ten(10)
ten(5)

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f hello=h4be83b97ef46480eb6f8573f2ab90ed7c5c8b1e5 int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f ten=hf4f51e4cf24724da57c43defaba9896829117c9f
hello("hello")
// int
hello(@error:argWrongType(expected: :"hello") "ho")
// int
ten(10)
// int
ten(@error:argWrongType(expected: :10) 5)
// int

==[rank 2 my folks]==
--[input]--
wantsId(id)

--[output:expected]--
alias id=hf5df74f88f6398e9901d80dd2392d8fffa98142d int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f wantsId=h3b8037c287f715e3d39f600ea453673b4ab5768c
wantsId(id)
// int

==[string top]==
--[input]--
type x = "one" + string
type Z = (<S: string>int)<x>

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4 x=h3f9576868ae56c15b738de7e8ece75628693b1fd
type x = "one" + string
type Z = (<S#[0]: string>int)<x>

==[string ops]==
--[input:shouldFail]--
type FancyArray = <Element: "one" + string + "suffix">Array<Element>
type Good = FancyArray<"ones and a suffix">
type Bad = FancyArray<"something else">

--[output:expected]--
alias Array=h878b63dedabdbd925b1e6834dc5ffe5dc3931246 error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f FancyArray=h742485072b86dcad62ff2187ca3dca7811afce4e string=hd978df838905e7e1bd7bb33530ae12436e3756f4
type FancyArray = <Element#[0]: "one" + string + "suffix">Array<Element#[0]>
type Good = FancyArray<"ones and a suffix">
type Bad = FancyArray<@error:argWrongType(expected: :"one" + string + "suffix") "something else">

==[string ops_]==
--[input:shouldFail]--
type NumArray = <Element: 10 + uint>Array<Element>
type Good = NumArray<20>
type Bad = NumArray<5>

--[output:expected]--
alias Array=h878b63dedabdbd925b1e6834dc5ffe5dc3931246 error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f NumArray=h11ed08761b64993f603a75b7049ac023df8e59d6 uint=h7f3ebb1dcbb38933edcaaabbbed6729a7c3bec83
type NumArray = <Element#[0]: 10 + uint>Array<Element#[0]>
type Good = NumArray<@error:argWrongType(expected: :10 + uint) 20>
type Bad = NumArray<@error:argWrongType(expected: :10 + uint) 5>

==[type arithmetic]==
--[input]--
type X = (<X: 10 + int>int)<13>
type X = (<X: 5 + 5>int)<10>
type X = (<X: string + ".js">int)<"hello.js">
type X = (<X: string + ".js">int)<"hi" + ".js">

--[output:expected]--
alias int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4
type X = (<X#[0]: 10 + int>int)<13>
type X = (<X#[0]: 5 + 5>int)<10>
type X = (<X#[0]: string + ".js">int)<"hello.js">
type X = (<X#[0]: string + ".js">int)<"hi" + ".js">

==[type arithmetic fail]==
--[input:shouldFail]--
type X = (<X: 10 + int>int)<5>
type X = (<X: 10 + int>int)<int>
type X = (<X: string + ".js">int)<string>

--[output:expected]--
alias error:argWrongType=hfcfe64cbbd9e081476f4c8c4a4b2f8f2f992804f int=h942cd67cf31d350ec1f39bcd0c933f586dcd176f string=hd978df838905e7e1bd7bb33530ae12436e3756f4
type X = (<X#[0]: 10 + int>int)<@error:argWrongType(expected: :10 + int) 5>
type X = (<X#[0]: 10 + int>int)<@error:argWrongType(expected: :10 + int) int>
type X = (<X#[0]: string + ".js">int)<@error:argWrongType(expected: :string + ".js") string>